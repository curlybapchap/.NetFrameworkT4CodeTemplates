<#@ template language="C#" HostSpecific="True" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ output extension=".html" #>
<#@ include file="Imports.include.t4" #>
<form id="<#=ViewDataTypeShortName#>sForm" class="camdenModal">
    <div class="form-horizontal">
        <h4><#=SplitCamelCase(ViewDataTypeShortName)#></h4>
        <div style="height:500px;overflow-y:auto;">
            <table id="<#=ViewDataTypeShortName#>sExisting" class="table">
                <thead>
                    <tr>
                    <#
                    foreach (PropertyMetadata property in ModelMetadata.Properties) {
                        if (property.Scaffold && !property.IsAutoGenerated && !property.IsReadOnly && !property.IsAssociation) {
                            if (property.IsPrimaryKey || IsPropertyGuid(property)) {
                                continue;
                            }
                    #>
                        <th><#=SplitCamelCase(property.PropertyName) #></th>
                    <#
                            }
                        }
                    #>
                        <th></th>
                    </tr>
                </thead>
                <tbody id="existing<#=ViewDataTypeShortName#>s"></tbody>
            </table>
        </div>
        <button type="button" id="NewRecord" class="btn btn-success">New</button>
    </div>
	<div id="EditingArea"></div>
    <#
    foreach (PropertyMetadata property in ModelMetadata.Properties) {
        if (property.Scaffold && !property.IsAutoGenerated && !property.IsReadOnly && !property.IsAssociation) {
            if (property.IsForeignKey) {
                #>
                    <div id="<#=PicklistName(GetAssociationName(property))#>Area"></div>
                <#
                continue;
            }
        }
    }
    #>
</form>
<#@ include file="ModelMetadataFunctions.cs.include.t4" #>
<#+
    public string RemoveIDtag(string propertyName)
    {
        return propertyName.Remove(propertyName.Length - 2);
    }

    public string PicklistName(string propertyName)
    {
        var idRemovedString = RemoveIDtag(propertyName);
        if(idRemovedString.Substring(idRemovedString.Length -1) == "y"){
            idRemovedString = idRemovedString.Remove(idRemovedString.Length - 1);
            idRemovedString = idRemovedString + "ies";
        }else{
            idRemovedString = idRemovedString + "s";
        }
        return idRemovedString + "Picklist";
    }

    public string SplitCamelCase(string propertyName)
    {
        var split = Regex.Split(propertyName, @"(?<!^)(?=[A-Z])");
        return string.Join(" ", split);
    }
#>