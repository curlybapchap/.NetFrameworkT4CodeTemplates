<#@ template language="C#" HostSpecific="True" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ output extension=".html" #>
<#@ include file="Imports.include.t4" #>
<#
// "form-control" attribute is only supported for all EditorFor() in System.Web.Mvc 5.1.0.0 or later versions, except for checkbox, which uses a div in Bootstrap
string boolType = "System.Boolean";
string intType = "System.Int32";
string decimalType = "System.Decimal";
Version requiredMvcVersion = new Version("5.1.0.0");
bool isControlHtmlAttributesSupported = MvcVersion >= requiredMvcVersion;
#>
<dialog id="EditRecord" style="width:500px;">
    <header class="dialog-header" style="text-align:center;">
        <h1>
            {{#if this.newRecord}}
            <p style="padding:0 5px 0 5px;display:inline;">New <#=ViewDataTypeShortName#> Details</p>
            {{else}}
            <p style="padding:0 5px 0 5px;display:inline;">Update <#=ViewDataTypeShortName#> {{this.PCode}}</p>
            {{/if}}
        </h1>
    </header>
    <div style="width:80%;">
<#
foreach (PropertyMetadata property in ModelMetadata.Properties) {
    if (property.IsPrimaryKey || IsPropertyGuid(property)) {
        #>
        <input type="hidden" id="<#= property.PropertyName #>" value="{{this.<#= property.PropertyName #>}}" />
        <#
        continue;
    }

    if (property.Scaffold && !property.IsAutoGenerated && !property.IsReadOnly && !property.IsAssociation) {
#>
<#
        if (property.IsForeignKey) {
        #>
        <label class="standard_form">
            <span><#= SplitCamelCase(RemoveIDtag(property.PropertyName)) #></span>
            <button type="button" class="btn btn-sm btn-success Show<#= PicklistName(GetAssociationName(property))#>" style="margin-right:10px;"><span class="glyphicon glyphicon-new-window Show<#= PicklistName(GetAssociationName(property)) #>"></span></button>
            <span id="<#= RemoveIDtag(property.PropertyName) #>Name">{{this.<#= RemoveIDtag(property.PropertyName) #>Name}}</span>
            <input type="hidden" id="<#= property.PropertyName #>" value="{{this.<#= property.PropertyName #>}}" />
        </label>
        <#
		continue;
        }
#>
<#
		if (!property.IsPrimaryKey && !IsPropertyGuid(property) && !property.IsForeignKey) {
            bool isCheckbox = property.TypeName.Equals(boolType);
            bool isNumeric = property.TypeName.Equals(intType);
            bool isDecimal = property.TypeName.Equals(decimalType);

		    if (isCheckbox) {
                #>
                <label class="standard_form toggle-switch">
                    <span><#=SplitCamelCase(property.PropertyName)#></span>
                    <input id="<#=property.PropertyName#>" type="checkbox" hidden {{#if this.<#=property.PropertyName#>}} checked {{/if}} />
                    <label for="<#=property.PropertyName#>" class="ts-helper"></label>
                </label>
                <#
            continue;
		    }
                if (isNumeric) {
                #>
                <label class="standard_form">
                    <span><#=SplitCamelCase(property.PropertyName)#></span>
                    <input type="number" id="<#= property.PropertyName#>" value="{{this.<#= property.PropertyName #>}}" required/>
                </label>
                <#
                    continue;
                }
		    if (isDecimal) {
                #>
                <label class="standard_form">
                    <span><#=SplitCamelCase(property.PropertyName)#></span>
                    <input type="number" step="0.01" id="<#=property.PropertyName#>" value="{{this.<#= property.PropertyName #>}}" required/>
                </label>
                <#
            continue;
		    }
        #>
            <label class="standard_form">
                <span><#=SplitCamelCase(property.PropertyName)#></span>
                <input type="text" id="<#= property.PropertyName #>" value="{{this.<#= property.PropertyName #>}}" required />
            </label>
        <#
		    }
	}
}
#>
    </div>

    <div style="display:flex;justify-content:center;">
        <button type="submit" id="SaveRecord" class="btn btn-success" style="margin-right:5px;">Save</button>
        <button type="button" id="CancelRecord" class="btn btn-warning">Cancel</button>
    </div>
</dialog>
<#@ include file="ModelMetadataFunctions.cs.include.t4" #>
<#+
    public string RemoveIDtag(string propertyName)
    {
        return propertyName.Remove(propertyName.Length - 2);
    }

    public string SplitCamelCase(string propertyName)
    {
        var split = Regex.Split(propertyName, @"(?<!^)(?=[A-Z])");
        return string.Join(" ", split);
    }

    public string PicklistName(string propertyName)
    {
        var idRemovedString = RemoveIDtag(propertyName);
        if(idRemovedString.Substring(idRemovedString.Length -1) == "y"){
            idRemovedString = idRemovedString.Remove(idRemovedString.Length - 1);
            idRemovedString = idRemovedString + "ies";
        }else{
            idRemovedString = idRemovedString + "s";
        }
        return idRemovedString + "Picklist";
    }
#>