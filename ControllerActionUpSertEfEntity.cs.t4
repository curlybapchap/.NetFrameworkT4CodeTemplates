<#@ template language="C#" HostSpecific="True" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ output extension=".cs" #>
<#@ include file="Imports.include.t4" #>
<#string boolType = "System.Boolean";#>

public string Get<#=ViewDataTypeShortName #>s(int? id)
    {
        rtn.data = new
        {
            <#=ViewDataTypeShortName #>s = DbCtx.<#=ViewDataTypeShortName#>s.Where(ii => ii.<#=ViewDataTypeShortName#>ID == id).ToList(),
            <#            
            foreach (PropertyMetadata property in ModelMetadata.Properties) {
                if (property.Scaffold && !property.IsAutoGenerated && !property.IsReadOnly && !property.IsAssociation) {
                    if (property.IsForeignKey) {
                    #>
                        <#= Pluralised(property.PropertyName) #> = DbCtx.<#=Pluralised(property.PropertyName)#>.ToList(),
                        <#= Pluralised(property.PropertyName) #> = CachedDataQuery<<#=RemoveIDtag(property.PropertyName)#>>.Get("<#=Pluralised(property.PropertyName)#>").ToList(),
                    <#
                    }
                }
            }
            #>
        };
        return JsonConvert.SerializeObject(rtn, Formatting.Indented);
    }

[HttpPost]
public string Save<#=ViewDataTypeShortName #>(<#=ViewDataTypeShortName #> recordToSave)
    {
        if (recordToSave.<#=ViewDataTypeShortName #>ID == 0)
        {
            DbCtx.<#=ViewDataTypeShortName #>s.Add(recordToSave);
        }
        else
        {
            var existingRecord = DbCtx.<#=ViewDataTypeShortName #>s.FirstOrDefault(cd => cd.<#=ViewDataTypeShortName #>ID == recordToSave.<#=ViewDataTypeShortName #>ID);
        <#
            foreach (PropertyMetadata property in ModelMetadata.Properties) {
                if (property.Scaffold && !property.IsAutoGenerated && !property.IsReadOnly && !property.IsAssociation) {
                    if (property.IsPrimaryKey || IsPropertyGuid(property)) {
                        continue;
                    }
                    #>
                        existingRecord.<#=property.PropertyName#> = recordToSave.<#=property.PropertyName#>;
                    <#
                }
            }
        #>
        }

        DbCtx.SaveChanges();
        rtn.data = new { id = recordToSave.<#=ViewDataTypeShortName #>ID };
        return JsonConvert.SerializeObject(rtn, Formatting.Indented);
    }

<#@ include file="ModelMetadataFunctions.cs.include.t4" #>
<#+
    public string RemoveIDtag(string propertyName)
    {
        return propertyName.Remove(propertyName.Length - 2);
    }

    public string Pluralised(string propertyName)
    {
        var idRemovedString = RemoveIDtag(propertyName);
        if(idRemovedString.Substring(idRemovedString.Length -1) == "y"){
            idRemovedString = idRemovedString.Remove(idRemovedString.Length - 1);
            idRemovedString = idRemovedString + "ies";
        }else{
            idRemovedString = idRemovedString + "s";
        }
        return idRemovedString;
    }
#>