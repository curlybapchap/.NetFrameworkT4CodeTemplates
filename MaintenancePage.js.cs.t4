<#@ template language="C#" HostSpecific="True" #>
<#@ output extension=".js" #>
<#@ include file="Imports.include.t4" #>
<#
// "form-control" attribute is only supported for all EditorFor() in System.Web.Mvc 5.1.0.0 or later versions, except for checkbox, which uses a div in Bootstrap
string boolType = "System.Boolean";
string stringType = "System.String";
Version requiredMvcVersion = new Version("5.1.0.0");
bool isControlHtmlAttributesSupported = MvcVersion >= requiredMvcVersion;
#>
(function () {
    nitec.namespace('nitec.hbFunctions.Window.<#=ViewDataTypeShortName#>s');

    const <#=ViewDataTypeShortName#>s = nitec.hbFunctions.Window.<#=ViewDataTypeShortName#>s;
    let dataSet = [];
    let dataFromServer;

    <#=ViewDataTypeShortName#>s.Init = function () {
        <#=ViewDataTypeShortName#>s.getDetails(refreshTable);

        $id("EditingArea").addEventListener("click", function (event) {
            if (event.target.id === "CancelRecord") {
                $id("EditRecord").close();
            }

        <#
        foreach (PropertyMetadata property in ModelMetadata.Properties) {
            if (property.IsForeignKey) {
                #>
                if (event.target.classList.contains("Show<#=PicklistName(property.PropertyName)#>")) { document.getElementById("<#=PicklistName(property.PropertyName)#>").showModal(); }
                <#
                continue;
            }
        }
        #>
        });

        document.getElementById("<#=ViewDataTypeShortName#>sForm").addEventListener("submit", function (event) {
            event.preventDefault();
            updateRecord();
        });

        document.getElementById("NewRecord").addEventListener("click", function (event) {
            const newRecord = {
    <#
        foreach (PropertyMetadata property in ModelMetadata.Properties) {
            if (property.Scaffold && !property.IsAutoGenerated && !property.IsReadOnly && !property.IsAssociation) {
                if (property.IsPrimaryKey) {
                    #>
				    <#=property.PropertyName#>: 0,
	                <#
            }else if (property.IsForeignKey) {
                #>
                <#=property.PropertyName#>: null,
                <#
            }else{
					bool isCheckbox = property.TypeName.Equals(boolType);
                    bool isString = property.TypeName.Equals(stringType);
					if(isCheckbox){
                        #>
				            <#=property.PropertyName#>: true,
                        <#
					}else if (isString){
	                    #>
				            <#=property.PropertyName#>: "",
	                    <#
					}else {
	                    #>
				            <#=property.PropertyName#>: 0,
	                    <#
					}
			    }
			}
        }
    #>
			newRecord: true
            };
            dataSet.push(newRecord);
            editRecord(newRecord);
        });

        $qS("#<#=ViewDataTypeShortName#>sExisting").addEventListener("click", function (event) {
            const source = event.target;
            if (source.classList.contains("edit-record-button")) {
                const id = Number(source.dataset.recordId);
                editRecord(getRecord(id));
            }
        });
    };

    const refreshTable = function () {
        <#
        foreach (PropertyMetadata property in ModelMetadata.Properties) {
            if (property.IsForeignKey) {
                #>
                dataSet.filter(lnk => lnk.<#=property.PropertyName#> !== null).forEach(lnk => lnk.<#=RemoveIDtag(property.PropertyName)#>Name = dataFromServer.<#=RemoveIDtag(property.PropertyName)#>s.find(pm => pm.<#=property.PropertyName#> === lnk.<#=property.PropertyName#>).Description);
                <#
                continue;
            }
        }
        #>
        $id("existing<#=ViewDataTypeShortName#>s").innerHTML = nitec.Templates["Handlebars/Admin/DataMaintenance/<#=ViewDataTypeShortName#>s/<#=ViewDataTypeShortName#>sExisting.html"](dataSet);
    };

    const getRecord = function (id) {
        return dataSet.find(pg => pg.<#=ViewDataTypeShortName#>ID === Number(id));
    };

    const updateRecord = function () {
        const updateSource = document.getElementById("EditRecord");
        const recToUpdate = getRecord(updateSource.querySelector("#<#=ViewDataTypeShortName#>ID").value);
    <#
        foreach (PropertyMetadata property in ModelMetadata.Properties) {
            if (property.Scaffold && !property.IsAutoGenerated && !property.IsReadOnly && !property.IsAssociation) {
                if (property.IsPrimaryKey || IsPropertyGuid(property)) {
                    continue;
                }
            bool isCheckbox = property.TypeName.Equals(boolType);
            bool isStringValue = property.TypeName.Equals(stringType);
            if(isCheckbox){
                #>
	            recToUpdate.<#=property.PropertyName#> = updateSource.querySelector("#<#=property.PropertyName#>").checked;
                <#
            }
            else if(isStringValue){
                #>
	            recToUpdate.<#=property.PropertyName#> = updateSource.querySelector("#<#=property.PropertyName#>").value;
                <#
            }
            else{
                #>
                recToUpdate.<#=property.PropertyName#> = updateSource.querySelector("#<#=property.PropertyName#>").value;
                <#
                }
            }
        }
    #>
    <#=ViewDataTypeShortName#>s.saveDetails(recToUpdate);
    };

    const editRecord = function (record) {
        $id("EditingArea").innerHTML = nitec.Templates["Handlebars/Admin/DataMaintenance/<#=ViewDataTypeShortName#>s/<#=ViewDataTypeShortName#>sEdit.html"](record);
        document.getElementById("EditRecord").showModal();
    };

    const setUpPicklists = function () {
        <#
        foreach (PropertyMetadata property in ModelMetadata.Properties) {
            if (property.IsForeignKey) {
                #>
        $id("<#=PicklistName(property.PropertyName)#>Area").innerHTML = nitec.Templates["Handlebars/Admin/DataMaintenance/<#=Pluralised(property.PropertyName)#>/<#= PicklistName(property.PropertyName)#>.html"](dataFromServer.<#=Pluralised(property.PropertyName)#>);
        $id("<#=PicklistName(property.PropertyName)#>Area").addEventListener("click", function (el) {
            let source = el.target;
            if (source.parentElement.classList.contains("picklist-item-select")) {
                source = source.parentElement;
                let recordID = Number(source.dataset.recordId);
                $id("<#=property.PropertyName#>").value = recordID;
                $id("<#=RemoveIDtag(property.PropertyName)#>Name").innerHTML = dataFromServer.<#=Pluralised(property.PropertyName)#>.find(pc => pc.<#=property.PropertyName#> === recordID).Description;
                $id("<#=PicklistName(property.PropertyName)#>").close();
            }
        });

                <#
                continue;
            }
        }
        #>
    };

    <#=ViewDataTypeShortName#>s.getDetails = function (callBack) {
        nitec.helperFuncs.aJaxGet({
            includeAntiForgeryToken: true,
            url: '/Admin/DataMaintenance/Get<#=ViewDataTypeShortName#>s',
            data: {},
            method: 'GET',
            blockScreen: true,
            successTrue: function (data) {
                dataSet = data.data.<#=ViewDataTypeShortName#>s;
                dataFromServer = data.data;
                setUpPicklists();
                if (typeof callBack === "function") { callBack(dataSet); }
            },
            successFalse: function (data) {
                nitec.helperFuncs.successFalse(data);
            }
        });
    };

    <#=ViewDataTypeShortName#>s.saveDetails = function (record) {
        nitec.helperFuncs.aJaxGet({
            includeAntiForgeryToken: true,
            url: '/Admin/DataMaintenance/Save<#=ViewDataTypeShortName#>',
            data: { recordToSave: record },
            method: 'POST',
            blockScreen: true,
            successTrue: function () {
                <#=ViewDataTypeShortName#>s.getDetails(refreshTable);
                $id("EditRecord").close();
            },
            successFalse: function (data) {
                nitec.helperFuncs.successFalse(data);
            }
        });
    };

}());
<#@ include file="ModelMetadataFunctions.cs.include.t4" #>
<#+
    public string RemoveIDtag(string propertyName)
    {
        return propertyName.Remove(propertyName.Length - 2);
    }

    public string Pluralised(string propertyName)
    {
        var idRemovedString = RemoveIDtag(propertyName);
        if(idRemovedString.Substring(idRemovedString.Length -1) == "y"){
            idRemovedString = idRemovedString.Remove(idRemovedString.Length - 1);
            idRemovedString = idRemovedString + "ies";
        }else{
            idRemovedString = idRemovedString + "s";
        }
        return idRemovedString;
    }

    public string PicklistName(string propertyName)
    {
        var pluralisedName = Pluralised(propertyName);
        return pluralisedName + "Picklist";
    }
#>